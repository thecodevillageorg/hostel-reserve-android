package com.thecodevillage.hostelreserveapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "room".
*/
public class RoomDao extends AbstractDao<Room, Void> {

    public static final String TABLENAME = "room";

    /**
     * Properties of entity Room.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "ID");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property MaxOccupants = new Property(3, int.class, "maxOccupants", false, "MAX_OCCUPANTS");
        public final static Property Cost = new Property(4, double.class, "cost", false, "COST");
        public final static Property HostelId = new Property(5, Long.class, "hostelId", false, "HOSTEL_ID");
    }


    public RoomDao(DaoConfig config) {
        super(config);
    }
    
    public RoomDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"room\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"CODE\" TEXT," + // 1: code
                "\"NAME\" TEXT," + // 2: name
                "\"MAX_OCCUPANTS\" INTEGER NOT NULL ," + // 3: maxOccupants
                "\"COST\" REAL NOT NULL ," + // 4: cost
                "\"HOSTEL_ID\" INTEGER);"); // 5: hostelId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"room\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Room entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getMaxOccupants());
        stmt.bindDouble(5, entity.getCost());
 
        Long hostelId = entity.getHostelId();
        if (hostelId != null) {
            stmt.bindLong(6, hostelId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Room entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getMaxOccupants());
        stmt.bindDouble(5, entity.getCost());
 
        Long hostelId = entity.getHostelId();
        if (hostelId != null) {
            stmt.bindLong(6, hostelId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Room readEntity(Cursor cursor, int offset) {
        Room entity = new Room( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // maxOccupants
            cursor.getDouble(offset + 4), // cost
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // hostelId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Room entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMaxOccupants(cursor.getInt(offset + 3));
        entity.setCost(cursor.getDouble(offset + 4));
        entity.setHostelId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Room entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Room entity) {
        return null;
    }

    @Override
    public boolean hasKey(Room entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
